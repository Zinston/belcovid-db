{"version":3,"sources":["../src/index.js"],"names":["MongoClient","MONGO_URI","useUnifiedTopology","client","connect","console","error","close","connectMongoDB","catch","then","db","server","credentials","origin","use","get","req","res","updates","statusCode","json","updated","collection","find","toArray","updateTimes","length","params","key","fromId","diff","next","status","send","listen","process","env","PORT","log"],"mappings":";;;qEA6CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACsB,IAAIA,iBAAJ,CAAgBC,oBAAhB,EAA2B,EAACC,oBAAoB,IAArB,EAA3B,CADtB;;AAAA;AACOC,YADP;AAAA;AAAA;AAAA,aAGQA,OAAOC,OAAP,EAHR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAKEC,cAAQC,KAAR;AALF;AAAA,aAMQH,OAAOI,KAAP,EANR;;AAAA;AAAA,wCAQQJ,MARR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeK,c;;;;;AA7Cf;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEAA,iBAAiBC,KAAjB,CAAuBJ,QAAQC,KAA/B,EAAsCI,IAAtC,CAA2C,kBAAU;AACpD,KAAMC,KAAKR,OAAOQ,EAAP,CAAU,UAAV,CAAX;;AAEA,KAAMC,SAAS,wBAAf;AACA,qBAAK,EAACC,aAAa,IAAd,EAAoBC,QAAQ,IAA5B,EAAL;AACAF,QAAOG,GAAP,CAAW,qBAAX;;AAEAH,QAAOI,GAAP,CAAW,SAAX;AAAA,qEAAsB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACC,yBAAeP,EAAf,CADD;;AAAA;AACfQ,cADe;;AAErBD,WAAIE,UAAJ,GAAiB,GAAjB;AACAF,WAAIG,IAAJ,CAAS,EAACC,SAASH,OAAV,EAAT;;AAHqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;AAKAP,QAAOI,GAAP,CAAW,cAAX;AAAA,sEAA2B,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACAP,GAAGY,UAAH,CAAc,YAAd,EAA4BC,IAA5B,GAAmCC,OAAnC,EADA;;AAAA;AACpBC,kBADoB;;AAE1BR,WAAIE,UAAJ,GAAiB,GAAjB;AACAF,WAAIG,IAAJ,CAASK,YAAYA,YAAYC,MAAZ,GAAqB,CAAjC,CAAT;;AAH0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;AAKAf,QAAOI,GAAP,CAAW,gBAAX;AAAA,sEAA6B,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAET,kBAAQP,EAAR,EAAYM,IAAIW,MAAJ,CAAWC,GAAvB,EAA4BZ,IAAIW,MAAJ,CAAWE,MAAvC,CAFS;;AAAA;AAEtBC,WAFsB;;AAG5Bb,WAAIE,UAAJ,GAAiB,GAAjB;AACAF,WAAIG,IAAJ,CAASU,IAAT;;AAJ4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;;AAOA;AACAnB,QAAOG,GAAP,CAAW,UAACE,GAAD,EAAMC,GAAN,EAAWc,IAAX,EAAoB;AAC9Bd,MAAIe,MAAJ,CAAW,GAAX;AACAf,MAAIgB,IAAJ,CAAS,qBAAT;AACA,EAHD;;AAKA;AACA;AACAtB,QAAOuB,MAAP,CAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAlC,EAAwC,YAAM;AAC7C;AACAjC,UAAQkC,GAAR,yBAAiCH,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAArD;AACA,EAHD;AAIA,CApCD","file":"index.js","sourcesContent":["import express from 'express';\nimport MongoClient from 'mongodb';\nimport {MONGO_URI} from './constants.js';\nimport {getDiff} from './get.js';\nimport {updateDatabase} from './put.js';\nimport cors from 'cors';\n\nconnectMongoDB().catch(console.error).then(client => {\n\tconst db = client.db('belcovid');\n\n\tconst server = express();\n\tcors({credentials: true, origin: true});\n\tserver.use(cors());\n\n\tserver.get('/update', async (req, res) => {\n\t\tconst updates = await updateDatabase(db);\n\t\tres.statusCode = 200;\n\t\tres.json({updated: updates});\n\t});\n\tserver.get('/update-time', async (req, res) => {\n\t\tconst updateTimes = await db.collection('lastUpdate').find().toArray();\n\t\tres.statusCode = 200;\n\t\tres.json(updateTimes[updateTimes.length - 1]);\n\t});\n\tserver.get('/:key/:fromId?', async (req, res) => {\n\t\t// Get the diff between the data at given id and the latest data.\n\t\tconst diff = await getDiff(db, req.params.key, req.params.fromId);\n\t\tres.statusCode = 200;\n\t\tres.json(diff);\n\t});\n\n\t// Handle 404 - Keep this as a last route\n\tserver.use((req, res, next) => {\n\t\tres.status(404);\n\t\tres.send('404: File Not Found');\n\t});\n\n\t// listen for request on port 3000, and as a callback function have the port listened on logged\n\t// eslint-disable-next-line no-undef\n\tserver.listen(process.env.PORT || 3000, () => {\n\t\t// eslint-disable-next-line no-console,no-undef\n\t\tconsole.log(`Listening to port ${process.env.PORT || 3000}`);\n\t});\n});\n\nasync function connectMongoDB() {\n\tconst client = await new MongoClient(MONGO_URI, {useUnifiedTopology: true});\n\ttry {\n\t\tawait client.connect();\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\tawait client.close();\n\t}\n\treturn client;\n}\n"]}