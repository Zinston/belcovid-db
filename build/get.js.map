{"version":3,"sources":["../src/get.js"],"names":["db","key","fromId","getRecord","id","record","startRecord","getLatestRecord","endRecord","start","end","changes","getDiff","collection","cursor","find","toArray","allDiffs","index","findIndex","singleDiff","diffId","slice","recordId","diff","apply"],"mappings":";;;;;;;;uEAEO,iBAAuBA,EAAvB,EAA2BC,GAA3B,EAAgCC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACiBA,MADjB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BACgCC,UAAUH,EAAV,EAAcC,GAAd,EAAmBC,MAAnB,CADhC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,sCAC6D,EAACE,IAAI,EAAL,EAASC,QAAQ,EAAjB,EAD7D;;AAAA;AACGC,mCADH;AAAA;AAAA,+BAEqBC,gBAAgBP,EAAhB,EAAoBC,GAApB,CAFrB;;AAAA;AAEGO,iCAFH;AAAA,yDAGI;AACHC,mCAAOH,YAAYF,EADhB;AAEHM,iCAAKF,UAAUJ,EAFZ;AAGHO,qCAAS,yBAAKL,YAAYD,MAAjB,EAAyBG,UAAUH,MAAnC;AAHN,yBAHJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeO,O;;;;;;wEASf,kBAA+BZ,EAA/B,EAAmCC,GAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,0DACIE,UAAUH,EAAV,EAAcC,GAAd,EAAmB,MAAnB,CADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeM,e;;;;;;wEAGtB,kBAAyBP,EAAzB,EAA6BC,GAA7B,EAAkCG,EAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUS,kCADV,GACuBb,GAAGa,UAAH,CAAcZ,GAAd,CADvB;AAEUa,8BAFV,GAEmBD,WAAWE,IAAX,EAFnB;AAGI;;AAHJ;AAAA,+BAIyBD,OAAOE,OAAP,EAJzB;;AAAA;AAIQC,gCAJR;;AAKI,4BAAIb,OAAO,MAAX,EAAmB;AACTc,iCADS,GACDd,KAAKa,SAASE,SAAT,CAAmB;AAAA,uCAAcC,WAAWC,MAAX,KAAsBjB,EAApC;AAAA,6BAAnB,CAAL,GAAkE,CADjE;;AAEfa,uCAAWA,SAASK,KAAT,CAAe,CAAf,EAAkBJ,QAAQ,CAA1B,CAAX;AACH;AACGb,8BATR,GASiB,EATjB;AAUQkB,gCAVR;AAAA;AAAA;AAAA;AAAA;;AAWI,yCAAyBN,QAAzB,uHAAmC;AAAxBG,sCAAwB;;AAC/Bf,qCAASmB,oBAAKC,KAAL,CAAWL,WAAWT,OAAtB,EAA+BN,MAA/B,CAAT;AACAkB,uCAAWH,WAAWC,MAAtB;AACH;AAdL;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,0DAeW,EAACjB,IAAImB,QAAL,EAAelB,cAAf,EAfX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeF,S;;;;;AAdf","file":"get.js","sourcesContent":["import diff from 'changeset';\n\nexport async function getDiff(db, key, fromId) {\n    const startRecord = fromId ? await getRecord(db, key, fromId) : {id: '', record: []};\n    const endRecord = await getLatestRecord(db, key);\n    return {\n        start: startRecord.id,\n        end: endRecord.id,\n        changes: diff(startRecord.record, endRecord.record),\n    };\n}\nexport async function getLatestRecord(db, key) {\n    return getRecord(db, key, 'last');\n}\nasync function getRecord(db, key, id) {\n    const collection = db.collection(key);\n    const cursor = collection.find();\n    // Get all diffs until ID.\n    let allDiffs = await cursor.toArray();\n    if (id !== 'last') {\n        const index = id ? allDiffs.findIndex(singleDiff => singleDiff.diffId === id) : 0;\n        allDiffs = allDiffs.slice(0, index + 1);\n    }\n    let record = [];\n    let recordId;\n    for (const singleDiff of allDiffs) {\n        record = diff.apply(singleDiff.changes, record);\n        recordId = singleDiff.diffId;\n    }\n    return {id: recordId, record};\n}\n"]}