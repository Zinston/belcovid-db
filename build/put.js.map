{"version":3,"sources":["../src/put.js"],"names":["db","normalizeAllData","fetchData","newData","updatedKeys","Object","keys","key","collection","latestRecord","changes","record","length","insertOne","diffId","console","log","push","updateDatabase","data","URLS","json","finalData","values","cases","normalizeData","AGE_GROUPS_CASES","totalHospitalizations","newHospitalizations","totalICU","mortality","AGE_GROUPS_MORTALITY","tests","dataKey","ageGroups","PROVINCES","item","province","PROVINCE","date","DATE","value","ageGroup","AGEGROUP","be","normalizedValue","totalValue","total","belgiumValue","belgiumTotal","provinceValue"],"mappings":"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","file":"put.js","sourcesContent":["import fetch from 'node-fetch';\nimport diff from 'changeset';\nimport {v1 as uuidv1} from 'uuid';\nimport {AGE_GROUPS_CASES, AGE_GROUPS_MORTALITY, PROVINCES, URLS} from './constants';\nimport {objectFrom, provinceKey} from './utils';\nimport {getLatestRecord} from './get';\n\nexport async function updateDatabase(db) {\n    // Fetch and normalize Sciensano data.\n    const newData = normalizeAllData(await fetchData());\n\n    // Update the database with the latest diffs.\n    const updatedKeys = [];\n    for (const key of Object.keys(newData)) {\n        const collection = db.collection(key);\n        // Compute the latest recorded data from all recorded diffs.\n        const latestRecord = await getLatestRecord(db, key);\n\n        // Compute the diff between the latest recorded data and the new\n        // data.\n        const changes = diff(latestRecord.record, newData[key]);\n        if (changes.length) {\n            // Insert the diff into the database.\n            await collection.insertOne({\n                diffId: uuidv1(),\n                changes,\n            });\n            // eslint-disable-next-line no-console\n            console.log(`insert new diff for ${key}`);\n            updatedKeys.push(key);\n        } else {\n            // eslint-disable-next-line no-console\n            console.log(`no changes to record for ${key}`);\n        }\n    }\n    return updatedKeys;\n}\n\nasync function fetchData() {\n    let data = [];\n    for (const key of Object.keys(URLS)) {\n        data.push([key, await (await fetch(URLS[key])).json()]);\n    }\n    return data;\n}\n\nfunction normalizeAllData(data) {\n    const finalData = {};\n    for (const [key, values] of data) {\n        switch (key) {\n            case 'cases': {\n                finalData.cases = normalizeData('CASES', values, AGE_GROUPS_CASES);\n                break;\n            }\n            case 'hospitalizations': {\n                finalData.totalHospitalizations = normalizeData('TOTAL_IN', values);\n                finalData.newHospitalizations = normalizeData('NEW_IN', values);\n                finalData.totalICU = normalizeData('TOTAL_IN_ICU', values);\n                break;\n            }\n            case 'mortality': {\n                finalData.mortality = normalizeData('DEATHS', values, AGE_GROUPS_MORTALITY);\n                break;\n            }\n            case 'tests': {\n                finalData.tests = normalizeData('TESTS_ALL', values, AGE_GROUPS_MORTALITY);\n                break;\n            }\n        }\n    }\n    return finalData;\n}\nfunction normalizeData(dataKey, values, ageGroups) {\n    const data = objectFrom(Object.keys(PROVINCES), {});\n    for (const item of values) {\n        const province = (item.PROVINCE && provinceKey(item.PROVINCE)) || 'be';\n        const date = item.DATE;\n        if (!date) {\n            continue;\n        }\n\n        const value = +item[dataKey];\n        if (ageGroups) {\n            const ageGroup = item.AGEGROUP || 'Age unknown';\n            if (!data[province][date]) {\n                // Initialize the age group values.\n                data[province][date] = objectFrom(ageGroups, 0);\n            }\n            if (!data.be[date]) {\n                // Initialize the age group values for Belgium.\n                data.be[date] = objectFrom(ageGroups, 0);\n            }\n            const normalizedValue = data[province][date][ageGroup] || 0;\n            // Set province value at date for age group.\n            data[province][date][ageGroup] = normalizedValue + value;\n            // Add to total for province at date.\n            const totalValue = data[province][date].total || 0;\n            data[province][date].total = totalValue + value;\n            // Add to totals for Belgium at date.\n            if (province !== 'be') {\n                if (!data.be[date]) {\n                    data.be[date] = {};\n                }\n                // Add to total for Belgium at date for age group.\n                const belgiumValue = data.be[date][ageGroup] || 0;\n                data.be[date][ageGroup] = belgiumValue + value;\n                // Add to total for Belgium at date.\n                const belgiumTotal = data.be[date].total || 0;\n                data.be[date].total = belgiumTotal + value;\n            }\n        } else {\n            const provinceValue = data[province][date] || 0;\n            // Set province value at date.\n            data[province][date] = provinceValue + value;\n            // Add to total for Belgium at date.\n            if (province !== 'be') {\n                const belgiumValue = data.be[date] || 0;\n                data.be[date] = belgiumValue + value;\n            }\n        }\n    }\n    return data;\n}\n"]}