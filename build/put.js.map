{"version":3,"sources":["../src/put.js"],"names":["db","collection","insertOne","datetime","Date","normalizeAllData","fetchData","newData","updatedKeys","Object","keys","key","latestRecord","changes","record","length","diffId","console","log","push","updateDatabase","data","URLS","json","finalData","values","cases","normalizeData","AGE_GROUPS_CASES","totalHospitalizations","newHospitalizations","totalICU","mortality","AGE_GROUPS_MORTALITY","tests","vaccinationPartial","filter","item","DOSE","AGE_GROUPS_VACCINATION","vaccinationFull","includes","dataKey","ageGroups","PROVINCES","province","PROVINCE","date","DATE","value","ageGroup","AGEGROUP","be","normalizedValue","totalValue","total","belgiumValue","belgiumTotal","provinceValue"],"mappings":"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","file":"put.js","sourcesContent":["import fetch from 'node-fetch';\nimport diff from 'changeset';\nimport {v1 as uuidv1} from 'uuid';\nimport {AGE_GROUPS_CASES, AGE_GROUPS_MORTALITY, AGE_GROUPS_VACCINATION, PROVINCES, URLS} from './constants';\nimport {objectFrom, provinceKey} from './utils';\nimport {getLatestRecord} from './get';\n\nexport async function updateDatabase(db) {\n    // Save the time of starting the update.\n    db.collection('lastUpdate').insertOne({datetime: new Date()});\n\n    // Fetch and normalize Sciensano data.\n    const newData = normalizeAllData(await fetchData());\n\n    // Update the database with the latest diffs.\n    const updatedKeys = [];\n    for (const key of Object.keys(newData)) {\n        const collection = db.collection(key);\n        // Compute the latest recorded data from all recorded diffs.\n        const latestRecord = await getLatestRecord(db, key);\n\n        // Compute the diff between the latest recorded data and the new\n        // data.\n        const changes = diff(latestRecord.record, newData[key]);\n        if (changes.length) {\n            // Insert the diff into the database.\n            await collection.insertOne({\n                diffId: uuidv1(),\n                datetime: new Date(),\n                changes,\n            });\n            // eslint-disable-next-line no-console\n            console.log(`insert new diff for ${key}`);\n            updatedKeys.push(key);\n        } else {\n            // eslint-disable-next-line no-console\n            console.log(`no changes to record for ${key}`);\n        }\n    }\n    return updatedKeys;\n}\n\nasync function fetchData() {\n    let data = [];\n    for (const key of Object.keys(URLS)) {\n        data.push([key, await (await fetch(URLS[key])).json()]);\n    }\n    return data;\n}\n\nfunction normalizeAllData(data) {\n    const finalData = {};\n    for (const [key, values] of data) {\n        switch (key) {\n            case 'cases': {\n                finalData.cases = normalizeData('CASES', values, AGE_GROUPS_CASES);\n                break;\n            }\n            case 'hospitalizations': {\n                finalData.totalHospitalizations = normalizeData('TOTAL_IN', values);\n                finalData.newHospitalizations = normalizeData('NEW_IN', values);\n                finalData.totalICU = normalizeData('TOTAL_IN_ICU', values);\n                break;\n            }\n            case 'mortality': {\n                finalData.mortality = normalizeData('DEATHS', values, AGE_GROUPS_MORTALITY);\n                break;\n            }\n            case 'tests': {\n                finalData.tests = normalizeData('TESTS_ALL', values, AGE_GROUPS_MORTALITY);\n                break;\n            }\n            case 'vaccination': {\n                finalData.vaccinationPartial = normalizeData(\n                    'COUNT', values.filter(item => item.DOSE === 'A'), AGE_GROUPS_VACCINATION);\n                finalData.vaccinationFull = normalizeData(\n                    'COUNT', values.filter(item => ['B', 'C'].includes(item.DOSE)), AGE_GROUPS_VACCINATION);\n            }\n        }\n    }\n    return finalData;\n}\nfunction normalizeData(dataKey, values, ageGroups) {\n    const data = objectFrom(Object.keys(PROVINCES), {});\n    for (const item of values) {\n        const province = (item.PROVINCE && provinceKey(item.PROVINCE)) || 'be';\n        const date = item.DATE;\n        if (!date) {\n            continue;\n        }\n\n        const value = +item[dataKey];\n        if (ageGroups) {\n            const ageGroup = item.AGEGROUP || 'Age unknown';\n            if (!data[province][date]) {\n                // Initialize the age group values.\n                data[province][date] = objectFrom(ageGroups, 0);\n            }\n            if (!data.be[date]) {\n                // Initialize the age group values for Belgium.\n                data.be[date] = objectFrom(ageGroups, 0);\n            }\n            const normalizedValue = data[province][date][ageGroup] || 0;\n            // Set province value at date for age group.\n            data[province][date][ageGroup] = normalizedValue + value;\n            // Add to total for province at date.\n            const totalValue = data[province][date].total || 0;\n            data[province][date].total = totalValue + value;\n            // Add to totals for Belgium at date.\n            if (province !== 'be') {\n                if (!data.be[date]) {\n                    data.be[date] = {};\n                }\n                // Add to total for Belgium at date for age group.\n                const belgiumValue = data.be[date][ageGroup] || 0;\n                data.be[date][ageGroup] = belgiumValue + value;\n                // Add to total for Belgium at date.\n                const belgiumTotal = data.be[date].total || 0;\n                data.be[date].total = belgiumTotal + value;\n            }\n        } else {\n            const provinceValue = data[province][date] || 0;\n            // Set province value at date.\n            data[province][date] = provinceValue + value;\n            // Add to total for Belgium at date.\n            if (province !== 'be') {\n                const belgiumValue = data.be[date] || 0;\n                data.be[date] = belgiumValue + value;\n            }\n        }\n    }\n    return data;\n}\n"]}